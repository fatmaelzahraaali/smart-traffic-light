
diagnostics_chip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000283c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800297c  0800297c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800297c  0800297c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800297c  0800297c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002984  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000018  0800299c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800299c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078c0  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001605  00000000  00000000  00027901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  00028f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  00029678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b38  00000000  00000000  00029d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000742a  00000000  00000000  00040878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008197e  00000000  00000000  00047ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c9620  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd4  00000000  00000000  000c9674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002930 	.word	0x08002930

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002930 	.word	0x08002930

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b099      	sub	sp, #100	; 0x64
 8000150:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 ff07 	bl	8000f64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f905 	bl	8000364 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f975 	bl	8000448 <MX_GPIO_Init>
	MX_SPI1_Init();
 800015e:	f000 f93d 	bl	80003dc <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	NRF24_begin(GPIOB, CSNpin_Pin, CEpin_Pin, hspi1);
 8000162:	4c79      	ldr	r4, [pc, #484]	; (8000348 <main+0x1fc>)
 8000164:	4668      	mov	r0, sp
 8000166:	1d23      	adds	r3, r4, #4
 8000168:	2254      	movs	r2, #84	; 0x54
 800016a:	4619      	mov	r1, r3
 800016c:	f002 fbca 	bl	8002904 <memcpy>
 8000170:	6823      	ldr	r3, [r4, #0]
 8000172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800017a:	4874      	ldr	r0, [pc, #464]	; (800034c <main+0x200>)
 800017c:	f000 fb46 	bl	800080c <NRF24_begin>
	NRF24_openReadingPipe(0, TxpipeAddrs);
 8000180:	4b73      	ldr	r3, [pc, #460]	; (8000350 <main+0x204>)
 8000182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000186:	2000      	movs	r0, #0
 8000188:	f000 fc68 	bl	8000a5c <NRF24_openReadingPipe>
	NRF24_setAutoAck(false);
 800018c:	2000      	movs	r0, #0
 800018e:	f000 fd23 	bl	8000bd8 <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 8000192:	2020      	movs	r0, #32
 8000194:	f000 fce0 	bl	8000b58 <NRF24_setPayloadSize>
	NRF24_setChannel(76);
 8000198:	204c      	movs	r0, #76	; 0x4c
 800019a:	f000 fcc8 	bl	8000b2e <NRF24_setChannel>
	NRF24_startListening();
 800019e:	f000 fc13 	bl	80009c8 <NRF24_startListening>

	HAL_GPIO_WritePin(GPIOB, TestLed_Pin, 1);
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001a8:	4868      	ldr	r0, [pc, #416]	; (800034c <main+0x200>)
 80001aa:	f001 f9f3 	bl	8001594 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 ff39 	bl	8001028 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, TestLed_Pin, 0);
 80001b6:	2200      	movs	r2, #0
 80001b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001bc:	4863      	ldr	r0, [pc, #396]	; (800034c <main+0x200>)
 80001be:	f001 f9e9 	bl	8001594 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, CAM_1_Pin, 0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2180      	movs	r1, #128	; 0x80
 80001c6:	4861      	ldr	r0, [pc, #388]	; (800034c <main+0x200>)
 80001c8:	f001 f9e4 	bl	8001594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, CAM_2_Pin, 0);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	485e      	ldr	r0, [pc, #376]	; (800034c <main+0x200>)
 80001d2:	f001 f9df 	bl	8001594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, CAM_3_Pin, 0);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2120      	movs	r1, #32
 80001da:	485c      	ldr	r0, [pc, #368]	; (800034c <main+0x200>)
 80001dc:	f001 f9da 	bl	8001594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, CAM_4_Pin, 0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2110      	movs	r1, #16
 80001e4:	4859      	ldr	r0, [pc, #356]	; (800034c <main+0x200>)
 80001e6:	f001 f9d5 	bl	8001594 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, UsOn_Pin, 0);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2101      	movs	r1, #1
 80001ee:	4857      	ldr	r0, [pc, #348]	; (800034c <main+0x200>)
 80001f0:	f001 f9d0 	bl	8001594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, UsOff_Pin, 0);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2102      	movs	r1, #2
 80001f8:	4854      	ldr	r0, [pc, #336]	; (800034c <main+0x200>)
 80001fa:	f001 f9cb 	bl	8001594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, ArdOn_Pin, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2102      	movs	r1, #2
 8000202:	4854      	ldr	r0, [pc, #336]	; (8000354 <main+0x208>)
 8000204:	f001 f9c6 	bl	8001594 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, ArdOff_Pin, 0);
 8000208:	2200      	movs	r2, #0
 800020a:	2104      	movs	r1, #4
 800020c:	4851      	ldr	r0, [pc, #324]	; (8000354 <main+0x208>)
 800020e:	f001 f9c1 	bl	8001594 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		NRF24_read(rec, 32);
 8000212:	2120      	movs	r1, #32
 8000214:	4850      	ldr	r0, [pc, #320]	; (8000358 <main+0x20c>)
 8000216:	f000 fbfd 	bl	8000a14 <NRF24_read>
		if (rec[0] == '8') {
 800021a:	4b4f      	ldr	r3, [pc, #316]	; (8000358 <main+0x20c>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b38      	cmp	r3, #56	; 0x38
 8000220:	d1f7      	bne.n	8000212 <main+0xc6>

			for (uint8_t i = 0; i < 5; i++)
 8000222:	2300      	movs	r3, #0
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	e016      	b.n	8000256 <main+0x10a>
			{
				HAL_GPIO_WritePin(GPIOB, TestLed_Pin, 1);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022e:	4847      	ldr	r0, [pc, #284]	; (800034c <main+0x200>)
 8000230:	f001 f9b0 	bl	8001594 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8000234:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000238:	f000 fef6 	bl	8001028 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, TestLed_Pin, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000242:	4842      	ldr	r0, [pc, #264]	; (800034c <main+0x200>)
 8000244:	f001 f9a6 	bl	8001594 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8000248:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800024c:	f000 feec 	bl	8001028 <HAL_Delay>
			for (uint8_t i = 0; i < 5; i++)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	3301      	adds	r3, #1
 8000254:	71fb      	strb	r3, [r7, #7]
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b04      	cmp	r3, #4
 800025a:	d9e5      	bls.n	8000228 <main+0xdc>
			}
			if (rec[1] == '1') {
 800025c:	4b3e      	ldr	r3, [pc, #248]	; (8000358 <main+0x20c>)
 800025e:	785b      	ldrb	r3, [r3, #1]
 8000260:	2b31      	cmp	r3, #49	; 0x31
 8000262:	d10e      	bne.n	8000282 <main+0x136>
				HAL_GPIO_WritePin(GPIOB, CAM_1_Pin, 1);
 8000264:	2201      	movs	r2, #1
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	4838      	ldr	r0, [pc, #224]	; (800034c <main+0x200>)
 800026a:	f001 f993 	bl	8001594 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 800026e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000272:	f000 fed9 	bl	8001028 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, CAM_1_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	4834      	ldr	r0, [pc, #208]	; (800034c <main+0x200>)
 800027c:	f001 f98a 	bl	8001594 <HAL_GPIO_WritePin>
 8000280:	e037      	b.n	80002f2 <main+0x1a6>
			} else if (rec[1] == '2') {
 8000282:	4b35      	ldr	r3, [pc, #212]	; (8000358 <main+0x20c>)
 8000284:	785b      	ldrb	r3, [r3, #1]
 8000286:	2b32      	cmp	r3, #50	; 0x32
 8000288:	d10e      	bne.n	80002a8 <main+0x15c>
				HAL_GPIO_WritePin(GPIOB, CAM_2_Pin, 1);
 800028a:	2201      	movs	r2, #1
 800028c:	2140      	movs	r1, #64	; 0x40
 800028e:	482f      	ldr	r0, [pc, #188]	; (800034c <main+0x200>)
 8000290:	f001 f980 	bl	8001594 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8000294:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000298:	f000 fec6 	bl	8001028 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, CAM_2_Pin, 0);
 800029c:	2200      	movs	r2, #0
 800029e:	2140      	movs	r1, #64	; 0x40
 80002a0:	482a      	ldr	r0, [pc, #168]	; (800034c <main+0x200>)
 80002a2:	f001 f977 	bl	8001594 <HAL_GPIO_WritePin>
 80002a6:	e024      	b.n	80002f2 <main+0x1a6>
			} else if (rec[1] == '3') {
 80002a8:	4b2b      	ldr	r3, [pc, #172]	; (8000358 <main+0x20c>)
 80002aa:	785b      	ldrb	r3, [r3, #1]
 80002ac:	2b33      	cmp	r3, #51	; 0x33
 80002ae:	d10e      	bne.n	80002ce <main+0x182>
				HAL_GPIO_WritePin(GPIOB, CAM_3_Pin, 1);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2120      	movs	r1, #32
 80002b4:	4825      	ldr	r0, [pc, #148]	; (800034c <main+0x200>)
 80002b6:	f001 f96d 	bl	8001594 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80002ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002be:	f000 feb3 	bl	8001028 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, CAM_3_Pin, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2120      	movs	r1, #32
 80002c6:	4821      	ldr	r0, [pc, #132]	; (800034c <main+0x200>)
 80002c8:	f001 f964 	bl	8001594 <HAL_GPIO_WritePin>
 80002cc:	e011      	b.n	80002f2 <main+0x1a6>
			} else if (rec[1] == '4') {
 80002ce:	4b22      	ldr	r3, [pc, #136]	; (8000358 <main+0x20c>)
 80002d0:	785b      	ldrb	r3, [r3, #1]
 80002d2:	2b34      	cmp	r3, #52	; 0x34
 80002d4:	d10d      	bne.n	80002f2 <main+0x1a6>
				HAL_GPIO_WritePin(GPIOB, CAM_4_Pin, 1);
 80002d6:	2201      	movs	r2, #1
 80002d8:	2110      	movs	r1, #16
 80002da:	481c      	ldr	r0, [pc, #112]	; (800034c <main+0x200>)
 80002dc:	f001 f95a 	bl	8001594 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80002e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002e4:	f000 fea0 	bl	8001028 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, CAM_4_Pin, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	4817      	ldr	r0, [pc, #92]	; (800034c <main+0x200>)
 80002ee:	f001 f951 	bl	8001594 <HAL_GPIO_WritePin>
			}
			if(Ard_flag == 1)
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <main+0x210>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d18b      	bne.n	8000212 <main+0xc6>
			{
				/****Pulse to turn off Arduino****/
				HAL_GPIO_WritePin(GPIOA, ArdOff_Pin, 1);
 80002fa:	2201      	movs	r2, #1
 80002fc:	2104      	movs	r1, #4
 80002fe:	4815      	ldr	r0, [pc, #84]	; (8000354 <main+0x208>)
 8000300:	f001 f948 	bl	8001594 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8000304:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000308:	f000 fe8e 	bl	8001028 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, ArdOff_Pin, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	2104      	movs	r1, #4
 8000310:	4810      	ldr	r0, [pc, #64]	; (8000354 <main+0x208>)
 8000312:	f001 f93f 	bl	8001594 <HAL_GPIO_WritePin>
				Ard_flag = 0;
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <main+0x210>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]

				HAL_Delay(2000);
 800031c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000320:	f000 fe82 	bl	8001028 <HAL_Delay>

				/****Pulse to turn on us system****/
				HAL_GPIO_WritePin(GPIOB, UsOn_Pin, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2101      	movs	r1, #1
 8000328:	4808      	ldr	r0, [pc, #32]	; (800034c <main+0x200>)
 800032a:	f001 f933 	bl	8001594 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 800032e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000332:	f000 fe79 	bl	8001028 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, UsOn_Pin,0);
 8000336:	2200      	movs	r2, #0
 8000338:	2101      	movs	r1, #1
 800033a:	4804      	ldr	r0, [pc, #16]	; (800034c <main+0x200>)
 800033c:	f001 f92a 	bl	8001594 <HAL_GPIO_WritePin>
				US_flag = 1;
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <main+0x214>)
 8000342:	2201      	movs	r2, #1
 8000344:	701a      	strb	r2, [r3, #0]
		NRF24_read(rec, 32);
 8000346:	e764      	b.n	8000212 <main+0xc6>
 8000348:	200000c4 	.word	0x200000c4
 800034c:	40010c00 	.word	0x40010c00
 8000350:	20000000 	.word	0x20000000
 8000354:	40010800 	.word	0x40010800
 8000358:	20000034 	.word	0x20000034
 800035c:	20000008 	.word	0x20000008
 8000360:	20000054 	.word	0x20000054

08000364 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b090      	sub	sp, #64	; 0x40
 8000368:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800036a:	f107 0318 	add.w	r3, r7, #24
 800036e:	2228      	movs	r2, #40	; 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f002 fad4 	bl	8002920 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000386:	2302      	movs	r3, #2
 8000388:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038a:	2301      	movs	r3, #1
 800038c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038e:	2310      	movs	r3, #16
 8000390:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000392:	2300      	movs	r3, #0
 8000394:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	4618      	mov	r0, r3
 800039c:	f001 f92a 	bl	80015f4 <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x46>
		Error_Handler();
 80003a6:	f000 f90f 	bl	80005c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fb96 	bl	8001af4 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x6e>
		Error_Handler();
 80003ce:	f000 f8fb 	bl	80005c8 <Error_Handler>
	}
}
 80003d2:	bf00      	nop
 80003d4:	3740      	adds	r7, #64	; 0x40
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_SPI1_Init+0x64>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <MX_SPI1_Init+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_SPI1_Init+0x64>)
 80003e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003ec:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_SPI1_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_SPI1_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_SPI1_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_SPI1_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_SPI1_Init+0x64>)
 8000408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800040c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_SPI1_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <MX_SPI1_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_SPI1_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <MX_SPI1_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_SPI1_Init+0x64>)
 8000428:	220a      	movs	r2, #10
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_SPI1_Init+0x64>)
 800042e:	f001 fcbd 	bl	8001dac <HAL_SPI_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_SPI1_Init+0x60>
		Error_Handler();
 8000438:	f000 f8c6 	bl	80005c8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200000c4 	.word	0x200000c4
 8000444:	40013000 	.word	0x40013000

08000448 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800045c:	4b38      	ldr	r3, [pc, #224]	; (8000540 <MX_GPIO_Init+0xf8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a37      	ldr	r2, [pc, #220]	; (8000540 <MX_GPIO_Init+0xf8>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b35      	ldr	r3, [pc, #212]	; (8000540 <MX_GPIO_Init+0xf8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	4b32      	ldr	r3, [pc, #200]	; (8000540 <MX_GPIO_Init+0xf8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a31      	ldr	r2, [pc, #196]	; (8000540 <MX_GPIO_Init+0xf8>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <MX_GPIO_Init+0xf8>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <MX_GPIO_Init+0xf8>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a2b      	ldr	r2, [pc, #172]	; (8000540 <MX_GPIO_Init+0xf8>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <MX_GPIO_Init+0xf8>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b26      	ldr	r3, [pc, #152]	; (8000540 <MX_GPIO_Init+0xf8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a25      	ldr	r2, [pc, #148]	; (8000540 <MX_GPIO_Init+0xf8>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b23      	ldr	r3, [pc, #140]	; (8000540 <MX_GPIO_Init+0xf8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ArdOn_Pin | ArdOff_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2106      	movs	r1, #6
 80004c0:	4820      	ldr	r0, [pc, #128]	; (8000544 <MX_GPIO_Init+0xfc>)
 80004c2:	f001 f867 	bl	8001594 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80004c6:	2200      	movs	r2, #0
 80004c8:	f241 31f3 	movw	r1, #5107	; 0x13f3
 80004cc:	481e      	ldr	r0, [pc, #120]	; (8000548 <MX_GPIO_Init+0x100>)
 80004ce:	f001 f861 	bl	8001594 <HAL_GPIO_WritePin>
			UsOn_Pin | UsOff_Pin | TestLed_Pin | CAM_4_Pin | CAM_3_Pin
					| CAM_2_Pin | CAM_1_Pin | CEpin_Pin | CSNpin_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : ArdOn_Pin ArdOff_Pin */
	GPIO_InitStruct.Pin = ArdOn_Pin | ArdOff_Pin;
 80004d2:	2306      	movs	r3, #6
 80004d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2302      	movs	r3, #2
 80004e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	4619      	mov	r1, r3
 80004e8:	4816      	ldr	r0, [pc, #88]	; (8000544 <MX_GPIO_Init+0xfc>)
 80004ea:	f000 fecf 	bl	800128c <HAL_GPIO_Init>

	/*Configure GPIO pins : UsOn_Pin UsOff_Pin TestLed_Pin CAM_4_Pin
	 CAM_3_Pin CAM_2_Pin CAM_1_Pin CEpin_Pin
	 CSNpin_Pin */
	GPIO_InitStruct.Pin = UsOn_Pin | UsOff_Pin | TestLed_Pin | CAM_4_Pin
 80004ee:	f241 33f3 	movw	r3, #5107	; 0x13f3
 80004f2:	613b      	str	r3, [r7, #16]
			| CAM_3_Pin | CAM_2_Pin | CAM_1_Pin | CEpin_Pin | CSNpin_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2302      	movs	r3, #2
 80004fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4810      	ldr	r0, [pc, #64]	; (8000548 <MX_GPIO_Init+0x100>)
 8000508:	f000 fec0 	bl	800128c <HAL_GPIO_Init>

	/*Configure GPIO pin : NodeIN_Pin */
	GPIO_InitStruct.Pin = NodeIN_Pin;
 800050c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000510:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_GPIO_Init+0x104>)
 8000514:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(NodeIN_GPIO_Port, &GPIO_InitStruct);
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	4619      	mov	r1, r3
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <MX_GPIO_Init+0x100>)
 8000522:	f000 feb3 	bl	800128c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	2028      	movs	r0, #40	; 0x28
 800052c:	f000 fe77 	bl	800121e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000530:	2028      	movs	r0, #40	; 0x28
 8000532:	f000 fe90 	bl	8001256 <HAL_NVIC_EnableIRQ>

}
 8000536:	bf00      	nop
 8000538:	3720      	adds	r7, #32
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000
 8000544:	40010800 	.word	0x40010800
 8000548:	40010c00 	.word	0x40010c00
 800054c:	10110000 	.word	0x10110000

08000550 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
	if (Ard_flag == 0) {
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <HAL_GPIO_EXTI_Callback+0x68>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d125      	bne.n	80005ae <HAL_GPIO_EXTI_Callback+0x5e>
		/****Pulse to turn off us system****/
		HAL_GPIO_WritePin(GPIOB, UsOff_Pin, 1);
 8000562:	2201      	movs	r2, #1
 8000564:	2102      	movs	r1, #2
 8000566:	4815      	ldr	r0, [pc, #84]	; (80005bc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000568:	f001 f814 	bl	8001594 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 800056c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000570:	f000 fd5a 	bl	8001028 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, UsOff_Pin, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2102      	movs	r1, #2
 8000578:	4810      	ldr	r0, [pc, #64]	; (80005bc <HAL_GPIO_EXTI_Callback+0x6c>)
 800057a:	f001 f80b 	bl	8001594 <HAL_GPIO_WritePin>
		US_flag = 0;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2000);
 8000584:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000588:	f000 fd4e 	bl	8001028 <HAL_Delay>
		/****Pulse to turn off Arduino****/
		HAL_GPIO_WritePin(GPIOA, ArdOn_Pin, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	2102      	movs	r1, #2
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000592:	f000 ffff 	bl	8001594 <HAL_GPIO_WritePin>
		HAL_Delay(300);
 8000596:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800059a:	f000 fd45 	bl	8001028 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, ArdOn_Pin, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	4808      	ldr	r0, [pc, #32]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x74>)
 80005a4:	f000 fff6 	bl	8001594 <HAL_GPIO_WritePin>
		Ard_flag = 1;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GPIO_EXTI_Callback+0x68>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]

	}
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000008 	.word	0x20000008
 80005bc:	40010c00 	.word	0x40010c00
 80005c0:	20000054 	.word	0x20000054
 80005c4:	40010800 	.word	0x40010800

080005c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005d0:	e7fe      	b.n	80005d0 <Error_Handler+0x8>
	...

080005d4 <NRF24_DelayMicroSeconds>:


//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <NRF24_DelayMicroSeconds+0x38>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <NRF24_DelayMicroSeconds+0x3c>)
 80005e6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ea:	0c9a      	lsrs	r2, r3, #18
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	fb02 f303 	mul.w	r3, r2, r3
 80005f2:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80005f4:	bf00      	nop
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	1e5a      	subs	r2, r3, #1
 80005fa:	60fa      	str	r2, [r7, #12]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1fa      	bne.n	80005f6 <NRF24_DelayMicroSeconds+0x22>
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	2000000c 	.word	0x2000000c
 8000610:	165e9f81 	.word	0x165e9f81

08000614 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d008      	beq.n	8000634 <NRF24_csn+0x20>
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <NRF24_csn+0x38>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <NRF24_csn+0x3c>)
 8000628:	8811      	ldrh	r1, [r2, #0]
 800062a:	2201      	movs	r2, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f000 ffb1 	bl	8001594 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000632:	e007      	b.n	8000644 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <NRF24_csn+0x38>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a05      	ldr	r2, [pc, #20]	; (8000650 <NRF24_csn+0x3c>)
 800063a:	8811      	ldrh	r1, [r2, #0]
 800063c:	2200      	movs	r2, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f000 ffa8 	bl	8001594 <HAL_GPIO_WritePin>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000064 	.word	0x20000064
 8000650:	20000068 	.word	0x20000068

08000654 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d008      	beq.n	8000674 <NRF24_ce+0x20>
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <NRF24_ce+0x38>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <NRF24_ce+0x3c>)
 8000668:	8811      	ldrh	r1, [r2, #0]
 800066a:	2201      	movs	r2, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ff91 	bl	8001594 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000672:	e007      	b.n	8000684 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <NRF24_ce+0x38>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a05      	ldr	r2, [pc, #20]	; (8000690 <NRF24_ce+0x3c>)
 800067a:	8811      	ldrh	r1, [r2, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f000 ff88 	bl	8001594 <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000064 	.word	0x20000064
 8000690:	2000006a 	.word	0x2000006a

08000694 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ffb8 	bl	8000614 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f003 031f 	and.w	r3, r3, #31
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80006ae:	f107 010c 	add.w	r1, r7, #12
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2201      	movs	r2, #1
 80006b6:	480a      	ldr	r0, [pc, #40]	; (80006e0 <NRF24_read_register+0x4c>)
 80006b8:	f001 fbfc 	bl	8001eb4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	1c59      	adds	r1, r3, #1
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	2201      	movs	r2, #1
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <NRF24_read_register+0x4c>)
 80006c8:	f001 fd37 	bl	800213a <HAL_SPI_Receive>
	retData = spiBuf[1];
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff ff9f 	bl	8000614 <NRF24_csn>
	return retData;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000006c 	.word	0x2000006c

080006e4 <NRF24_write_register>:
	//Bring CSN high
	NRF24_csn(1);
}
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff ff8d 	bl	8000614 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	f043 0320 	orr.w	r3, r3, #32
 8000700:	b2db      	uxtb	r3, r3
 8000702:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, HAL_MAX_DELAY);
 8000708:	f107 010c 	add.w	r1, r7, #12
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	2201      	movs	r2, #1
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <NRF24_write_register+0x54>)
 8000714:	f001 fbce 	bl	8001eb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf+1, 1, HAL_MAX_DELAY);
 8000718:	f107 010c 	add.w	r1, r7, #12
 800071c:	3101      	adds	r1, #1
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	2201      	movs	r2, #1
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <NRF24_write_register+0x54>)
 8000726:	f001 fbc5 	bl	8001eb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff ff72 	bl	8000614 <NRF24_csn>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000006c 	.word	0x2000006c

0800073c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
 8000748:	4613      	mov	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff61 	bl	8000614 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	b2db      	uxtb	r3, r3
 800075a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800075c:	f107 010c 	add.w	r1, r7, #12
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	2201      	movs	r2, #1
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <NRF24_write_registerN+0x4c>)
 8000766:	f001 fba5 	bl	8001eb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	b29a      	uxth	r2, r3
 800076e:	2364      	movs	r3, #100	; 0x64
 8000770:	6839      	ldr	r1, [r7, #0]
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <NRF24_write_registerN+0x4c>)
 8000774:	f001 fb9e 	bl	8001eb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff ff4b 	bl	8000614 <NRF24_csn>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000006c 	.word	0x2000006c

0800078c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000798:	f000 f9f4 	bl	8000b84 <NRF24_getPayloadSize>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d303      	bcc.n	80007ae <NRF24_read_payload+0x22>
 80007a6:	f000 f9ed 	bl	8000b84 <NRF24_getPayloadSize>
 80007aa:	4603      	mov	r3, r0
 80007ac:	e000      	b.n	80007b0 <NRF24_read_payload+0x24>
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff ff2e 	bl	8000614 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80007b8:	2361      	movs	r3, #97	; 0x61
 80007ba:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80007bc:	f107 010e 	add.w	r1, r7, #14
 80007c0:	2364      	movs	r3, #100	; 0x64
 80007c2:	2201      	movs	r2, #1
 80007c4:	4808      	ldr	r0, [pc, #32]	; (80007e8 <NRF24_read_payload+0x5c>)
 80007c6:	f001 fb75 	bl	8001eb4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	2364      	movs	r3, #100	; 0x64
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <NRF24_read_payload+0x5c>)
 80007d4:	f001 fcb1 	bl	800213a <HAL_SPI_Receive>
	NRF24_csn(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff ff1b 	bl	8000614 <NRF24_csn>
}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000006c 	.word	0x2000006c

080007ec <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80007f0:	21ff      	movs	r1, #255	; 0xff
 80007f2:	20e1      	movs	r0, #225	; 0xe1
 80007f4:	f7ff ff76 	bl	80006e4 <NRF24_write_register>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000800:	21ff      	movs	r1, #255	; 0xff
 8000802:	20e2      	movs	r0, #226	; 0xe2
 8000804:	f7ff ff6e 	bl	80006e4 <NRF24_write_register>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800080c:	b082      	sub	sp, #8
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	460b      	mov	r3, r1
 800081a:	807b      	strh	r3, [r7, #2]
 800081c:	4613      	mov	r3, r2
 800081e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000820:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <NRF24_begin+0x1ac>)
 8000822:	4618      	mov	r0, r3
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	2258      	movs	r2, #88	; 0x58
 800082a:	4619      	mov	r1, r3
 800082c:	f002 f86a 	bl	8002904 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000830:	4a62      	ldr	r2, [pc, #392]	; (80009bc <NRF24_begin+0x1b0>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000836:	4a62      	ldr	r2, [pc, #392]	; (80009c0 <NRF24_begin+0x1b4>)
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800083c:	4a61      	ldr	r2, [pc, #388]	; (80009c4 <NRF24_begin+0x1b8>)
 800083e:	883b      	ldrh	r3, [r7, #0]
 8000840:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff fee6 	bl	8000614 <NRF24_csn>
	NRF24_ce(0);
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff ff03 	bl	8000654 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800084e:	2005      	movs	r0, #5
 8000850:	f000 fbea 	bl	8001028 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000854:	2108      	movs	r1, #8
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ff44 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800085c:	213f      	movs	r1, #63	; 0x3f
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff ff40 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000864:	2103      	movs	r1, #3
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff ff3c 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800086c:	2103      	movs	r1, #3
 800086e:	2003      	movs	r0, #3
 8000870:	f7ff ff38 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000874:	2103      	movs	r1, #3
 8000876:	2004      	movs	r0, #4
 8000878:	f7ff ff34 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800087c:	2102      	movs	r1, #2
 800087e:	2005      	movs	r0, #5
 8000880:	f7ff ff30 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000884:	210f      	movs	r1, #15
 8000886:	2006      	movs	r0, #6
 8000888:	f7ff ff2c 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800088c:	210e      	movs	r1, #14
 800088e:	2007      	movs	r0, #7
 8000890:	f7ff ff28 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000894:	2100      	movs	r1, #0
 8000896:	2008      	movs	r0, #8
 8000898:	f7ff ff24 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800089c:	2100      	movs	r1, #0
 800089e:	2009      	movs	r0, #9
 80008a0:	f7ff ff20 	bl	80006e4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80008a4:	23e7      	movs	r3, #231	; 0xe7
 80008a6:	733b      	strb	r3, [r7, #12]
 80008a8:	23e7      	movs	r3, #231	; 0xe7
 80008aa:	72fb      	strb	r3, [r7, #11]
 80008ac:	23e7      	movs	r3, #231	; 0xe7
 80008ae:	72bb      	strb	r3, [r7, #10]
 80008b0:	23e7      	movs	r3, #231	; 0xe7
 80008b2:	727b      	strb	r3, [r7, #9]
 80008b4:	23e7      	movs	r3, #231	; 0xe7
 80008b6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2205      	movs	r2, #5
 80008be:	4619      	mov	r1, r3
 80008c0:	200a      	movs	r0, #10
 80008c2:	f7ff ff3b 	bl	800073c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80008c6:	23c2      	movs	r3, #194	; 0xc2
 80008c8:	733b      	strb	r3, [r7, #12]
 80008ca:	23c2      	movs	r3, #194	; 0xc2
 80008cc:	72fb      	strb	r3, [r7, #11]
 80008ce:	23c2      	movs	r3, #194	; 0xc2
 80008d0:	72bb      	strb	r3, [r7, #10]
 80008d2:	23c2      	movs	r3, #194	; 0xc2
 80008d4:	727b      	strb	r3, [r7, #9]
 80008d6:	23c2      	movs	r3, #194	; 0xc2
 80008d8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2205      	movs	r2, #5
 80008e0:	4619      	mov	r1, r3
 80008e2:	200b      	movs	r0, #11
 80008e4:	f7ff ff2a 	bl	800073c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80008e8:	21c3      	movs	r1, #195	; 0xc3
 80008ea:	200c      	movs	r0, #12
 80008ec:	f7ff fefa 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80008f0:	21c4      	movs	r1, #196	; 0xc4
 80008f2:	200d      	movs	r0, #13
 80008f4:	f7ff fef6 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80008f8:	21c5      	movs	r1, #197	; 0xc5
 80008fa:	200e      	movs	r0, #14
 80008fc:	f7ff fef2 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000900:	21c6      	movs	r1, #198	; 0xc6
 8000902:	200f      	movs	r0, #15
 8000904:	f7ff feee 	bl	80006e4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000908:	23e7      	movs	r3, #231	; 0xe7
 800090a:	733b      	strb	r3, [r7, #12]
 800090c:	23e7      	movs	r3, #231	; 0xe7
 800090e:	72fb      	strb	r3, [r7, #11]
 8000910:	23e7      	movs	r3, #231	; 0xe7
 8000912:	72bb      	strb	r3, [r7, #10]
 8000914:	23e7      	movs	r3, #231	; 0xe7
 8000916:	727b      	strb	r3, [r7, #9]
 8000918:	23e7      	movs	r3, #231	; 0xe7
 800091a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	2205      	movs	r2, #5
 8000922:	4619      	mov	r1, r3
 8000924:	2010      	movs	r0, #16
 8000926:	f7ff ff09 	bl	800073c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800092a:	2100      	movs	r1, #0
 800092c:	2011      	movs	r0, #17
 800092e:	f7ff fed9 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	2012      	movs	r0, #18
 8000936:	f7ff fed5 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800093a:	2100      	movs	r1, #0
 800093c:	2013      	movs	r0, #19
 800093e:	f7ff fed1 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	2014      	movs	r0, #20
 8000946:	f7ff fecd 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800094a:	2100      	movs	r1, #0
 800094c:	2015      	movs	r0, #21
 800094e:	f7ff fec9 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	2016      	movs	r0, #22
 8000956:	f7ff fec5 	bl	80006e4 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800095a:	f000 fa11 	bl	8000d80 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800095e:	2100      	movs	r1, #0
 8000960:	201c      	movs	r0, #28
 8000962:	f7ff febf 	bl	80006e4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000966:	2100      	movs	r1, #0
 8000968:	201d      	movs	r0, #29
 800096a:	f7ff febb 	bl	80006e4 <NRF24_write_register>

	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800096e:	210f      	movs	r1, #15
 8000970:	200f      	movs	r0, #15
 8000972:	f000 f8c1 	bl	8000af8 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000976:	2003      	movs	r0, #3
 8000978:	f000 f943 	bl	8000c02 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_250KBPS);
 800097c:	2002      	movs	r0, #2
 800097e:	f000 f979 	bl	8000c74 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000982:	2002      	movs	r0, #2
 8000984:	f000 f9bc 	bl	8000d00 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000988:	f000 f90e 	bl	8000ba8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800098c:	2020      	movs	r0, #32
 800098e:	f000 f8e3 	bl	8000b58 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8000992:	f000 f9ec 	bl	8000d6e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000996:	204c      	movs	r0, #76	; 0x4c
 8000998:	f000 f8c9 	bl	8000b2e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800099c:	f7ff ff26 	bl	80007ec <NRF24_flush_tx>
	NRF24_flush_rx();
 80009a0:	f7ff ff2c 	bl	80007fc <NRF24_flush_rx>

	NRF24_powerDown();
 80009a4:	f000 f9d4 	bl	8000d50 <NRF24_powerDown>

}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009b2:	b002      	add	sp, #8
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	2000006c 	.word	0x2000006c
 80009bc:	20000064 	.word	0x20000064
 80009c0:	20000068 	.word	0x20000068
 80009c4:	2000006a 	.word	0x2000006a

080009c8 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff fe61 	bl	8000694 <NRF24_read_register>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f043 0303 	orr.w	r3, r3, #3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4619      	mov	r1, r3
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff fe81 	bl	80006e4 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <NRF24_startListening+0x48>)
 80009e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	d004      	beq.n	80009f6 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80009ec:	2205      	movs	r2, #5
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <NRF24_startListening+0x48>)
 80009f0:	200a      	movs	r0, #10
 80009f2:	f7ff fea3 	bl	800073c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80009f6:	f7ff fef9 	bl	80007ec <NRF24_flush_tx>
	NRF24_flush_rx();
 80009fa:	f7ff feff 	bl	80007fc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fe28 	bl	8000654 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000a04:	2096      	movs	r0, #150	; 0x96
 8000a06:	f7ff fde5 	bl	80005d4 <NRF24_DelayMicroSeconds>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000058 	.word	0x20000058

08000a14 <NRF24_read>:
{
	return NRF24_availablePipe(NULL);
}
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	while(NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY));
 8000a20:	bf00      	nop
 8000a22:	2017      	movs	r0, #23
 8000a24:	f7ff fe36 	bl	8000694 <NRF24_read_register>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f7      	bne.n	8000a22 <NRF24_read+0xe>
	NRF24_read_payload( buf, len );
 8000a32:	78fb      	ldrb	r3, [r7, #3]
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fea8 	bl	800078c <NRF24_read_payload>
	uint8_t rxStatus = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000a40:	f7ff fedc 	bl	80007fc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000a44:	f000 f8a8 	bl	8000b98 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf14      	ite	ne
 8000a4e:	2301      	movne	r3, #1
 8000a50:	2300      	moveq	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4601      	mov	r1, r0
 8000a64:	e9c7 2300 	strd	r2, r3, [r7]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d104      	bne.n	8000a7c <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a76:	491c      	ldr	r1, [pc, #112]	; (8000ae8 <NRF24_openReadingPipe+0x8c>)
 8000a78:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d82d      	bhi.n	8000ade <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d808      	bhi.n	8000a9a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <NRF24_openReadingPipe+0x90>)
 8000a8c:	5cd3      	ldrb	r3, [r2, r3]
 8000a8e:	4639      	mov	r1, r7
 8000a90:	2205      	movs	r2, #5
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe52 	bl	800073c <NRF24_write_registerN>
 8000a98:	e007      	b.n	8000aaa <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	4a13      	ldr	r2, [pc, #76]	; (8000aec <NRF24_openReadingPipe+0x90>)
 8000a9e:	5cd3      	ldrb	r3, [r2, r3]
 8000aa0:	4639      	mov	r1, r7
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe49 	bl	800073c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <NRF24_openReadingPipe+0x94>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <NRF24_openReadingPipe+0x98>)
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fe14 	bl	80006e4 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000abc:	2002      	movs	r0, #2
 8000abe:	f7ff fde9 	bl	8000694 <NRF24_read_register>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b25a      	sxtb	r2, r3
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fe03 	bl	80006e4 <NRF24_write_register>
	}

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000058 	.word	0x20000058
 8000aec:	08002948 	.word	0x08002948
 8000af0:	08002950 	.word	0x08002950
 8000af4:	20000060 	.word	0x20000060

08000af8 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	011b      	lsls	r3, r3, #4
 8000b0c:	b25a      	sxtb	r2, r3
 8000b0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2004      	movs	r0, #4
 8000b22:	f7ff fddf 	bl	80006e4 <NRF24_write_register>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	4603      	mov	r3, r0
 8000b36:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000b38:	237f      	movs	r3, #127	; 0x7f
 8000b3a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4293      	cmp	r3, r2
 8000b42:	bf28      	it	cs
 8000b44:	4613      	movcs	r3, r2
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	2005      	movs	r0, #5
 8000b4c:	f7ff fdca 	bl	80006e4 <NRF24_write_register>
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000b62:	2320      	movs	r3, #32
 8000b64:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	bf28      	it	cs
 8000b6e:	4613      	movcs	r3, r2
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <NRF24_setPayloadSize+0x28>)
 8000b74:	701a      	strb	r2, [r3, #0]
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	20000060 	.word	0x20000060

08000b84 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
	return payload_size;
 8000b88:	4b02      	ldr	r3, [pc, #8]	; (8000b94 <NRF24_getPayloadSize+0x10>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	20000060 	.word	0x20000060

08000b98 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000b9c:	2060      	movs	r0, #96	; 0x60
 8000b9e:	f7ff fd79 	bl	8000694 <NRF24_read_register>
 8000ba2:	4603      	mov	r3, r0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000bac:	201d      	movs	r0, #29
 8000bae:	f7ff fd71 	bl	8000694 <NRF24_read_register>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f023 0304 	bic.w	r3, r3, #4
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	201d      	movs	r0, #29
 8000bbe:	f7ff fd91 	bl	80006e4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	201c      	movs	r0, #28
 8000bc6:	f7ff fd8d 	bl	80006e4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000bca:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <NRF24_disableDynamicPayloads+0x2c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000061 	.word	0x20000061

08000bd8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d004      	beq.n	8000bf2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000be8:	213f      	movs	r1, #63	; 0x3f
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff fd7a 	bl	80006e4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000bf0:	e003      	b.n	8000bfa <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff fd75 	bl	80006e4 <NRF24_write_register>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c0c:	2006      	movs	r0, #6
 8000c0e:	f7ff fd41 	bl	8000694 <NRF24_read_register>
 8000c12:	4603      	mov	r3, r0
 8000c14:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	f023 0306 	bic.w	r3, r3, #6
 8000c1c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d104      	bne.n	8000c2e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	f043 0306 	orr.w	r3, r3, #6
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e019      	b.n	8000c62 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d104      	bne.n	8000c3e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e011      	b.n	8000c62 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d104      	bne.n	8000c4e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e009      	b.n	8000c62 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d103      	bne.n	8000c62 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	f043 0306 	orr.w	r3, r3, #6
 8000c60:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	4619      	mov	r1, r3
 8000c66:	2006      	movs	r0, #6
 8000c68:	f7ff fd3c 	bl	80006e4 <NRF24_write_register>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000c82:	2006      	movs	r0, #6
 8000c84:	f7ff fd06 	bl	8000694 <NRF24_read_register>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <NRF24_setDataRate+0x88>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000c98:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d107      	bne.n	8000cb0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <NRF24_setDataRate+0x88>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000ca6:	7bbb      	ldrb	r3, [r7, #14]
 8000ca8:	f043 0320 	orr.w	r3, r3, #32
 8000cac:	73bb      	strb	r3, [r7, #14]
 8000cae:	e00d      	b.n	8000ccc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d107      	bne.n	8000cc6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <NRF24_setDataRate+0x88>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	73bb      	strb	r3, [r7, #14]
 8000cc4:	e002      	b.n	8000ccc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <NRF24_setDataRate+0x88>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2006      	movs	r0, #6
 8000cd2:	f7ff fd07 	bl	80006e4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000cd6:	2006      	movs	r0, #6
 8000cd8:	f7ff fcdc 	bl	8000694 <NRF24_read_register>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d102      	bne.n	8000cec <NRF24_setDataRate+0x78>
  {
    result = true;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e002      	b.n	8000cf2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <NRF24_setDataRate+0x88>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000062 	.word	0x20000062

08000d00 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fcc2 	bl	8000694 <NRF24_read_register>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f023 030c 	bic.w	r3, r3, #12
 8000d16:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00f      	beq.n	8000d3e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d104      	bne.n	8000d2e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e007      	b.n	8000d3e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4619      	mov	r1, r3
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fcce 	bl	80006e4 <NRF24_write_register>
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff fc9d 	bl	8000694 <NRF24_read_register>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f023 0302 	bic.w	r3, r3, #2
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4619      	mov	r1, r3
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fcbd 	bl	80006e4 <NRF24_write_register>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000d72:	2170      	movs	r1, #112	; 0x70
 8000d74:	2007      	movs	r0, #7
 8000d76:	f7ff fcb5 	bl	80006e4 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fc44 	bl	8000614 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000d8c:	2350      	movs	r3, #80	; 0x50
 8000d8e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000d90:	2373      	movs	r3, #115	; 0x73
 8000d92:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000d94:	1d39      	adds	r1, r7, #4
 8000d96:	2364      	movs	r3, #100	; 0x64
 8000d98:	2202      	movs	r2, #2
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <NRF24_ACTIVATE_cmd+0x30>)
 8000d9c:	f001 f88a 	bl	8001eb4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fc37 	bl	8000614 <NRF24_csn>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000006c 	.word	0x2000006c

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x5c>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_MspInit+0x60>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_MspInit+0x60>)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000

08000e18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d12f      	bne.n	8000e98 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e68:	23a0      	movs	r3, #160	; 0xa0
 8000e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <HAL_SPI_MspInit+0x90>)
 8000e7c:	f000 fa06 	bl	800128c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e80:	2340      	movs	r3, #64	; 0x40
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_SPI_MspInit+0x90>)
 8000e94:	f000 f9fa 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40013000 	.word	0x40013000
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef2:	f000 f87d 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000efe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f02:	f000 fb5f 	bl	80015c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
	...

08000f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f18:	f7ff fff7 	bl	8000f0a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f1e:	490c      	ldr	r1, [pc, #48]	; (8000f50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f20:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f34:	4c09      	ldr	r4, [pc, #36]	; (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f42:	f001 fcbb 	bl	80028bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f46:	f7ff f901 	bl	800014c <main>
  bx lr
 8000f4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f54:	08002984 	.word	0x08002984
  ldr r2, =_sbss
 8000f58:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f5c:	20000120 	.word	0x20000120

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x28>)
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f947 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff ff18 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f95f 	bl	8001272 <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f927 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000000c 	.word	0x2000000c
 8000fe8:	20000014 	.word	0x20000014
 8000fec:	20000010 	.word	0x20000010

08000ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_IncTick+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_IncTick+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <HAL_IncTick+0x20>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000014 	.word	0x20000014
 8001010:	2000011c 	.word	0x2000011c

08001014 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	2000011c 	.word	0x2000011c

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff0 	bl	8001014 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffe0 	bl	8001014 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000014 	.word	0x20000014

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4906      	ldr	r1, [pc, #24]	; (8001108 <__NVIC_EnableIRQ+0x34>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff90 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff2d 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff42 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff90 	bl	8001160 <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5f 	bl	800110c <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff35 	bl	80010d4 <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b08b      	sub	sp, #44	; 0x2c
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129e:	e169      	b.n	8001574 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012a0:	2201      	movs	r2, #1
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 8158 	bne.w	800156e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a9a      	ldr	r2, [pc, #616]	; (800152c <HAL_GPIO_Init+0x2a0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d05e      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012c8:	4a98      	ldr	r2, [pc, #608]	; (800152c <HAL_GPIO_Init+0x2a0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d875      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012ce:	4a98      	ldr	r2, [pc, #608]	; (8001530 <HAL_GPIO_Init+0x2a4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d058      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012d4:	4a96      	ldr	r2, [pc, #600]	; (8001530 <HAL_GPIO_Init+0x2a4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d86f      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012da:	4a96      	ldr	r2, [pc, #600]	; (8001534 <HAL_GPIO_Init+0x2a8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d052      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012e0:	4a94      	ldr	r2, [pc, #592]	; (8001534 <HAL_GPIO_Init+0x2a8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d869      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012e6:	4a94      	ldr	r2, [pc, #592]	; (8001538 <HAL_GPIO_Init+0x2ac>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d04c      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012ec:	4a92      	ldr	r2, [pc, #584]	; (8001538 <HAL_GPIO_Init+0x2ac>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d863      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012f2:	4a92      	ldr	r2, [pc, #584]	; (800153c <HAL_GPIO_Init+0x2b0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d046      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
 80012f8:	4a90      	ldr	r2, [pc, #576]	; (800153c <HAL_GPIO_Init+0x2b0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d85d      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d82a      	bhi.n	8001358 <HAL_GPIO_Init+0xcc>
 8001302:	2b12      	cmp	r3, #18
 8001304:	d859      	bhi.n	80013ba <HAL_GPIO_Init+0x12e>
 8001306:	a201      	add	r2, pc, #4	; (adr r2, 800130c <HAL_GPIO_Init+0x80>)
 8001308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130c:	08001387 	.word	0x08001387
 8001310:	08001361 	.word	0x08001361
 8001314:	08001373 	.word	0x08001373
 8001318:	080013b5 	.word	0x080013b5
 800131c:	080013bb 	.word	0x080013bb
 8001320:	080013bb 	.word	0x080013bb
 8001324:	080013bb 	.word	0x080013bb
 8001328:	080013bb 	.word	0x080013bb
 800132c:	080013bb 	.word	0x080013bb
 8001330:	080013bb 	.word	0x080013bb
 8001334:	080013bb 	.word	0x080013bb
 8001338:	080013bb 	.word	0x080013bb
 800133c:	080013bb 	.word	0x080013bb
 8001340:	080013bb 	.word	0x080013bb
 8001344:	080013bb 	.word	0x080013bb
 8001348:	080013bb 	.word	0x080013bb
 800134c:	080013bb 	.word	0x080013bb
 8001350:	08001369 	.word	0x08001369
 8001354:	0800137d 	.word	0x0800137d
 8001358:	4a79      	ldr	r2, [pc, #484]	; (8001540 <HAL_GPIO_Init+0x2b4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d013      	beq.n	8001386 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800135e:	e02c      	b.n	80013ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e029      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	3304      	adds	r3, #4
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e024      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	3308      	adds	r3, #8
 8001378:	623b      	str	r3, [r7, #32]
          break;
 800137a:	e01f      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	330c      	adds	r3, #12
 8001382:	623b      	str	r3, [r7, #32]
          break;
 8001384:	e01a      	b.n	80013bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800138e:	2304      	movs	r3, #4
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e013      	b.n	80013bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800139c:	2308      	movs	r3, #8
 800139e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	611a      	str	r2, [r3, #16]
          break;
 80013a6:	e009      	b.n	80013bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a8:	2308      	movs	r3, #8
 80013aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	615a      	str	r2, [r3, #20]
          break;
 80013b2:	e003      	b.n	80013bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x130>
          break;
 80013ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2bff      	cmp	r3, #255	; 0xff
 80013c0:	d801      	bhi.n	80013c6 <HAL_GPIO_Init+0x13a>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	e001      	b.n	80013ca <HAL_GPIO_Init+0x13e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3304      	adds	r3, #4
 80013ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d802      	bhi.n	80013d8 <HAL_GPIO_Init+0x14c>
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	e002      	b.n	80013de <HAL_GPIO_Init+0x152>
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	3b08      	subs	r3, #8
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	210f      	movs	r1, #15
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	401a      	ands	r2, r3
 80013f0:	6a39      	ldr	r1, [r7, #32]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	431a      	orrs	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80b1 	beq.w	800156e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800140c:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001424:	4a48      	ldr	r2, [pc, #288]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a40      	ldr	r2, [pc, #256]	; (800154c <HAL_GPIO_Init+0x2c0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d013      	beq.n	8001478 <HAL_GPIO_Init+0x1ec>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a3f      	ldr	r2, [pc, #252]	; (8001550 <HAL_GPIO_Init+0x2c4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d00d      	beq.n	8001474 <HAL_GPIO_Init+0x1e8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a3e      	ldr	r2, [pc, #248]	; (8001554 <HAL_GPIO_Init+0x2c8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d007      	beq.n	8001470 <HAL_GPIO_Init+0x1e4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a3d      	ldr	r2, [pc, #244]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_GPIO_Init+0x1e0>
 8001468:	2303      	movs	r3, #3
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x1ee>
 800146c:	2304      	movs	r3, #4
 800146e:	e004      	b.n	800147a <HAL_GPIO_Init+0x1ee>
 8001470:	2302      	movs	r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x1ee>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_GPIO_Init+0x1ee>
 8001478:	2300      	movs	r3, #0
 800147a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147c:	f002 0203 	and.w	r2, r2, #3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4093      	lsls	r3, r2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800148a:	492f      	ldr	r1, [pc, #188]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014a4:	4b2d      	ldr	r3, [pc, #180]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	492c      	ldr	r1, [pc, #176]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	608b      	str	r3, [r1, #8]
 80014b0:	e006      	b.n	80014c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4928      	ldr	r1, [pc, #160]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014bc:	4013      	ands	r3, r2
 80014be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014cc:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	4922      	ldr	r1, [pc, #136]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	491e      	ldr	r1, [pc, #120]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4918      	ldr	r1, [pc, #96]	; (800155c <HAL_GPIO_Init+0x2d0>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_GPIO_Init+0x2d0>)
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	43db      	mvns	r3, r3
 800150a:	4914      	ldr	r1, [pc, #80]	; (800155c <HAL_GPIO_Init+0x2d0>)
 800150c:	4013      	ands	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d021      	beq.n	8001560 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_GPIO_Init+0x2d0>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	490e      	ldr	r1, [pc, #56]	; (800155c <HAL_GPIO_Init+0x2d0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
 8001528:	e021      	b.n	800156e <HAL_GPIO_Init+0x2e2>
 800152a:	bf00      	nop
 800152c:	10320000 	.word	0x10320000
 8001530:	10310000 	.word	0x10310000
 8001534:	10220000 	.word	0x10220000
 8001538:	10210000 	.word	0x10210000
 800153c:	10120000 	.word	0x10120000
 8001540:	10110000 	.word	0x10110000
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	40010800 	.word	0x40010800
 8001550:	40010c00 	.word	0x40010c00
 8001554:	40011000 	.word	0x40011000
 8001558:	40011400 	.word	0x40011400
 800155c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	43db      	mvns	r3, r3
 8001568:	4909      	ldr	r1, [pc, #36]	; (8001590 <HAL_GPIO_Init+0x304>)
 800156a:	4013      	ands	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	3301      	adds	r3, #1
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	fa22 f303 	lsr.w	r3, r2, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f ae8e 	bne.w	80012a0 <HAL_GPIO_Init+0x14>
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	372c      	adds	r7, #44	; 0x2c
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015b0:	e003      	b.n	80015ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	611a      	str	r2, [r3, #16]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb4 	bl	8000550 <HAL_GPIO_EXTI_Callback>
  }
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e26c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8087 	beq.w	8001722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001614:	4b92      	ldr	r3, [pc, #584]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b04      	cmp	r3, #4
 800161e:	d00c      	beq.n	800163a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001620:	4b8f      	ldr	r3, [pc, #572]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b08      	cmp	r3, #8
 800162a:	d112      	bne.n	8001652 <HAL_RCC_OscConfig+0x5e>
 800162c:	4b8c      	ldr	r3, [pc, #560]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d10b      	bne.n	8001652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	4b89      	ldr	r3, [pc, #548]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d06c      	beq.n	8001720 <HAL_RCC_OscConfig+0x12c>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d168      	bne.n	8001720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e246      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x76>
 800165c:	4b80      	ldr	r3, [pc, #512]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a7f      	ldr	r2, [pc, #508]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e02e      	b.n	80016c8 <HAL_RCC_OscConfig+0xd4>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x98>
 8001672:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a7a      	ldr	r2, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b78      	ldr	r3, [pc, #480]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a77      	ldr	r2, [pc, #476]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e01d      	b.n	80016c8 <HAL_RCC_OscConfig+0xd4>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0xbc>
 8001696:	4b72      	ldr	r3, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a71      	ldr	r2, [pc, #452]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b6f      	ldr	r3, [pc, #444]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6e      	ldr	r2, [pc, #440]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0xd4>
 80016b0:	4b6b      	ldr	r3, [pc, #428]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a6a      	ldr	r2, [pc, #424]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a67      	ldr	r2, [pc, #412]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fca0 	bl	8001014 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fc9c 	bl	8001014 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1fa      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b5d      	ldr	r3, [pc, #372]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0xe4>
 80016f6:	e014      	b.n	8001722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fc8c 	bl	8001014 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fc88 	bl	8001014 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1e6      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x10c>
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d063      	beq.n	80017f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800173a:	4b49      	ldr	r3, [pc, #292]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d11c      	bne.n	8001780 <HAL_RCC_OscConfig+0x18c>
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d116      	bne.n	8001780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	4b43      	ldr	r3, [pc, #268]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_RCC_OscConfig+0x176>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e1ba      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4939      	ldr	r1, [pc, #228]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	e03a      	b.n	80017f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001788:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fc41 	bl	8001014 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fc3d 	bl	8001014 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e19b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	4927      	ldr	r1, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
 80017c8:	e015      	b.n	80017f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <HAL_RCC_OscConfig+0x270>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc20 	bl	8001014 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff fc1c 	bl	8001014 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e17a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03a      	beq.n	8001878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d019      	beq.n	800183e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_RCC_OscConfig+0x274>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff fc00 	bl	8001014 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001818:	f7ff fbfc 	bl	8001014 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e15a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_RCC_OscConfig+0x26c>)
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001836:	2001      	movs	r0, #1
 8001838:	f000 fa9a 	bl	8001d70 <RCC_Delay>
 800183c:	e01c      	b.n	8001878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_RCC_OscConfig+0x274>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001844:	f7ff fbe6 	bl	8001014 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184a:	e00f      	b.n	800186c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff fbe2 	bl	8001014 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d908      	bls.n	800186c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e140      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	42420000 	.word	0x42420000
 8001868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	4b9e      	ldr	r3, [pc, #632]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1e9      	bne.n	800184c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80a6 	beq.w	80019d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b97      	ldr	r3, [pc, #604]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10d      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b94      	ldr	r3, [pc, #592]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a93      	ldr	r2, [pc, #588]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b91      	ldr	r3, [pc, #580]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ae:	2301      	movs	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b2:	4b8e      	ldr	r3, [pc, #568]	; (8001aec <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d118      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018be:	4b8b      	ldr	r3, [pc, #556]	; (8001aec <HAL_RCC_OscConfig+0x4f8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a8a      	ldr	r2, [pc, #552]	; (8001aec <HAL_RCC_OscConfig+0x4f8>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ca:	f7ff fba3 	bl	8001014 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d2:	f7ff fb9f 	bl	8001014 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e0fd      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b81      	ldr	r3, [pc, #516]	; (8001aec <HAL_RCC_OscConfig+0x4f8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x312>
 80018f8:	4b7b      	ldr	r3, [pc, #492]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a7a      	ldr	r2, [pc, #488]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	e02d      	b.n	8001962 <HAL_RCC_OscConfig+0x36e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x334>
 800190e:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a75      	ldr	r2, [pc, #468]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a72      	ldr	r2, [pc, #456]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001920:	f023 0304 	bic.w	r3, r3, #4
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	e01c      	b.n	8001962 <HAL_RCC_OscConfig+0x36e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b05      	cmp	r3, #5
 800192e:	d10c      	bne.n	800194a <HAL_RCC_OscConfig+0x356>
 8001930:	4b6d      	ldr	r3, [pc, #436]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4a6c      	ldr	r2, [pc, #432]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4a69      	ldr	r2, [pc, #420]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6213      	str	r3, [r2, #32]
 8001948:	e00b      	b.n	8001962 <HAL_RCC_OscConfig+0x36e>
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a66      	ldr	r2, [pc, #408]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d015      	beq.n	8001996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff fb53 	bl	8001014 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7ff fb4f 	bl	8001014 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e0ab      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ee      	beq.n	8001972 <HAL_RCC_OscConfig+0x37e>
 8001994:	e014      	b.n	80019c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff fb3d 	bl	8001014 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff fb39 	bl	8001014 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e095      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ee      	bne.n	800199e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d105      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8081 	beq.w	8001ade <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019dc:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d061      	beq.n	8001aac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d146      	bne.n	8001a7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f0:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <HAL_RCC_OscConfig+0x4fc>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff fb0d 	bl	8001014 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff fb09 	bl	8001014 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e067      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a10:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d108      	bne.n	8001a38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	492d      	ldr	r1, [pc, #180]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a19      	ldr	r1, [r3, #32]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	4927      	ldr	r1, [pc, #156]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_OscConfig+0x4fc>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7ff fadd 	bl	8001014 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7ff fad9 	bl	8001014 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e037      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x46a>
 8001a7c:	e02f      	b.n	8001ade <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCC_OscConfig+0x4fc>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fac6 	bl	8001014 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff fac2 	bl	8001014 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e020      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x498>
 8001aaa:	e018      	b.n	8001ade <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e013      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40007000 	.word	0x40007000
 8001af0:	42420060 	.word	0x42420060

08001af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0d0      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 0207 	bic.w	r2, r3, #7
 8001b1e:	4965      	ldr	r1, [pc, #404]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0b8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	494d      	ldr	r1, [pc, #308]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d040      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d115      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e073      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06b      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4936      	ldr	r1, [pc, #216]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	f7ff fa16 	bl	8001014 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff fa12 	bl	8001014 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e053      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d210      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	4922      	ldr	r1, [pc, #136]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e032      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f821 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f974 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08002958 	.word	0x08002958
 8001cc0:	2000000c 	.word	0x2000000c
 8001cc4:	20000010 	.word	0x20000010

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d003      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x36>
 8001cf6:	e027      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfa:	613b      	str	r3, [r7, #16]
      break;
 8001cfc:	e027      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	0c9b      	lsrs	r3, r3, #18
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	0c5b      	lsrs	r3, r3, #17
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d2a:	fb02 f203 	mul.w	r2, r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e004      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	613b      	str	r3, [r7, #16]
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d4a:	613b      	str	r3, [r7, #16]
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	693b      	ldr	r3, [r7, #16]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	007a1200 	.word	0x007a1200
 8001d64:	08002968 	.word	0x08002968
 8001d68:	08002978 	.word	0x08002978
 8001d6c:	003d0900 	.word	0x003d0900

08001d70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <RCC_Delay+0x34>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <RCC_Delay+0x38>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0a5b      	lsrs	r3, r3, #9
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d8c:	bf00      	nop
  }
  while (Delay --);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1e5a      	subs	r2, r3, #1
 8001d92:	60fa      	str	r2, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <RCC_Delay+0x1c>
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	2000000c 	.word	0x2000000c
 8001da8:	10624dd3 	.word	0x10624dd3

08001dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e076      	b.n	8001eac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d108      	bne.n	8001dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dce:	d009      	beq.n	8001de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
 8001dd6:	e005      	b.n	8001de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff f80a 	bl	8000e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	ea42 0103 	orr.w	r1, r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	0c1a      	lsrs	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f002 0204 	and.w	r2, r2, #4
 8001e8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_SPI_Transmit+0x22>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e12d      	b.n	8002132 <HAL_SPI_Transmit+0x27e>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ede:	f7ff f899 	bl	8001014 <HAL_GetTick>
 8001ee2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d002      	beq.n	8001efa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ef8:	e116      	b.n	8002128 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_SPI_Transmit+0x52>
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f0a:	e10d      	b.n	8002128 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	88fa      	ldrh	r2, [r7, #6]
 8001f24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	88fa      	ldrh	r2, [r7, #6]
 8001f2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f52:	d10f      	bne.n	8001f74 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	2b40      	cmp	r3, #64	; 0x40
 8001f80:	d007      	beq.n	8001f92 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f9a:	d14f      	bne.n	800203c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <HAL_SPI_Transmit+0xf6>
 8001fa4:	8afb      	ldrh	r3, [r7, #22]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d142      	bne.n	8002030 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	881a      	ldrh	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	1c9a      	adds	r2, r3, #2
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001fce:	e02f      	b.n	8002030 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d112      	bne.n	8002004 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	881a      	ldrh	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	1c9a      	adds	r2, r3, #2
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	86da      	strh	r2, [r3, #54]	; 0x36
 8002002:	e015      	b.n	8002030 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002004:	f7ff f806 	bl	8001014 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d803      	bhi.n	800201c <HAL_SPI_Transmit+0x168>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201a:	d102      	bne.n	8002022 <HAL_SPI_Transmit+0x16e>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800202e:	e07b      	b.n	8002128 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ca      	bne.n	8001fd0 <HAL_SPI_Transmit+0x11c>
 800203a:	e050      	b.n	80020de <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_SPI_Transmit+0x196>
 8002044:	8afb      	ldrh	r3, [r7, #22]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d144      	bne.n	80020d4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	330c      	adds	r3, #12
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002070:	e030      	b.n	80020d4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b02      	cmp	r3, #2
 800207e:	d113      	bne.n	80020a8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	330c      	adds	r3, #12
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80020a6:	e015      	b.n	80020d4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020a8:	f7fe ffb4 	bl	8001014 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d803      	bhi.n	80020c0 <HAL_SPI_Transmit+0x20c>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d102      	bne.n	80020c6 <HAL_SPI_Transmit+0x212>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80020d2:	e029      	b.n	8002128 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1c9      	bne.n	8002072 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fbcc 	bl	8002880 <SPI_EndRxTxTransaction>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2220      	movs	r2, #32
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	77fb      	strb	r3, [r7, #31]
 800211e:	e003      	b.n	8002128 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002130:	7ffb      	ldrb	r3, [r7, #31]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b088      	sub	sp, #32
 800213e:	af02      	add	r7, sp, #8
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d002      	beq.n	8002160 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800215a:	2302      	movs	r3, #2
 800215c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800215e:	e0fb      	b.n	8002358 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002168:	d112      	bne.n	8002190 <HAL_SPI_Receive+0x56>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10e      	bne.n	8002190 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2204      	movs	r2, #4
 8002176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f8ef 	bl	800236a <HAL_SPI_TransmitReceive>
 800218c:	4603      	mov	r3, r0
 800218e:	e0e8      	b.n	8002362 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_SPI_Receive+0x64>
 800219a:	2302      	movs	r3, #2
 800219c:	e0e1      	b.n	8002362 <HAL_SPI_Receive+0x228>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021a6:	f7fe ff35 	bl	8001014 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_SPI_Receive+0x7e>
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021bc:	e0cc      	b.n	8002358 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2204      	movs	r2, #4
 80021c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	88fa      	ldrh	r2, [r7, #6]
 80021dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002204:	d10f      	bne.n	8002226 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d007      	beq.n	8002244 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d16a      	bne.n	8002322 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800224c:	e032      	b.n	80022b4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d115      	bne.n	8002288 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f103 020c 	add.w	r2, r3, #12
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002286:	e015      	b.n	80022b4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002288:	f7fe fec4 	bl	8001014 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d803      	bhi.n	80022a0 <HAL_SPI_Receive+0x166>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229e:	d102      	bne.n	80022a6 <HAL_SPI_Receive+0x16c>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80022b2:	e051      	b.n	8002358 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1c7      	bne.n	800224e <HAL_SPI_Receive+0x114>
 80022be:	e035      	b.n	800232c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d113      	bne.n	80022f6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	b292      	uxth	r2, r2
 80022da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	1c9a      	adds	r2, r3, #2
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022f4:	e015      	b.n	8002322 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022f6:	f7fe fe8d 	bl	8001014 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d803      	bhi.n	800230e <HAL_SPI_Receive+0x1d4>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d102      	bne.n	8002314 <HAL_SPI_Receive+0x1da>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002320:	e01a      	b.n	8002358 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1c9      	bne.n	80022c0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	6839      	ldr	r1, [r7, #0]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fa53 	bl	80027dc <SPI_EndRxTransaction>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
 800234e:	e003      	b.n	8002358 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002360:	7dfb      	ldrb	r3, [r7, #23]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b08c      	sub	sp, #48	; 0x30
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002378:	2301      	movs	r3, #1
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_SPI_TransmitReceive+0x26>
 800238c:	2302      	movs	r3, #2
 800238e:	e198      	b.n	80026c2 <HAL_SPI_TransmitReceive+0x358>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002398:	f7fe fe3c 	bl	8001014 <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d00f      	beq.n	80023da <HAL_SPI_TransmitReceive+0x70>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023c0:	d107      	bne.n	80023d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_SPI_TransmitReceive+0x68>
 80023ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d003      	beq.n	80023da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023d8:	e16d      	b.n	80026b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_SPI_TransmitReceive+0x82>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_SPI_TransmitReceive+0x82>
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80023f2:	e160      	b.n	80026b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d003      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2205      	movs	r2, #5
 8002404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	887a      	ldrh	r2, [r7, #2]
 800241e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	887a      	ldrh	r2, [r7, #2]
 800242a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b40      	cmp	r3, #64	; 0x40
 800244a:	d007      	beq.n	800245c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800245a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002464:	d17c      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_SPI_TransmitReceive+0x10a>
 800246e:	8b7b      	ldrh	r3, [r7, #26]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d16a      	bne.n	800254a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	1c9a      	adds	r2, r3, #2
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002498:	e057      	b.n	800254a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d11b      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x176>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_SPI_TransmitReceive+0x176>
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d113      	bne.n	80024e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	1c9a      	adds	r2, r3, #2
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d119      	bne.n	8002522 <HAL_SPI_TransmitReceive+0x1b8>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d014      	beq.n	8002522 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	b292      	uxth	r2, r2
 8002504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	1c9a      	adds	r2, r3, #2
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800251e:	2301      	movs	r3, #1
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002522:	f7fe fd77 	bl	8001014 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800252e:	429a      	cmp	r2, r3
 8002530:	d80b      	bhi.n	800254a <HAL_SPI_TransmitReceive+0x1e0>
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d007      	beq.n	800254a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002548:	e0b5      	b.n	80026b6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1a2      	bne.n	800249a <HAL_SPI_TransmitReceive+0x130>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d19d      	bne.n	800249a <HAL_SPI_TransmitReceive+0x130>
 800255e:	e080      	b.n	8002662 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_SPI_TransmitReceive+0x204>
 8002568:	8b7b      	ldrh	r3, [r7, #26]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d16f      	bne.n	800264e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	330c      	adds	r3, #12
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002594:	e05b      	b.n	800264e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d11c      	bne.n	80025de <HAL_SPI_TransmitReceive+0x274>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d017      	beq.n	80025de <HAL_SPI_TransmitReceive+0x274>
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d114      	bne.n	80025de <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d119      	bne.n	8002620 <HAL_SPI_TransmitReceive+0x2b6>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d014      	beq.n	8002620 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800261c:	2301      	movs	r3, #1
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002620:	f7fe fcf8 	bl	8001014 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800262c:	429a      	cmp	r2, r3
 800262e:	d803      	bhi.n	8002638 <HAL_SPI_TransmitReceive+0x2ce>
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002636:	d102      	bne.n	800263e <HAL_SPI_TransmitReceive+0x2d4>
 8002638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800264c:	e033      	b.n	80026b6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d19e      	bne.n	8002596 <HAL_SPI_TransmitReceive+0x22c>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d199      	bne.n	8002596 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f90a 	bl	8002880 <SPI_EndRxTxTransaction>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800267e:	e01a      	b.n	80026b6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ac:	e003      	b.n	80026b6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3730      	adds	r7, #48	; 0x30
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026dc:	f7fe fc9a 	bl	8001014 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026ec:	f7fe fc92 	bl	8001014 <HAL_GetTick>
 80026f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	0d1b      	lsrs	r3, r3, #20
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002702:	e054      	b.n	80027ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d050      	beq.n	80027ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800270c:	f7fe fc82 	bl	8001014 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	429a      	cmp	r2, r3
 800271a:	d902      	bls.n	8002722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d13d      	bne.n	800279e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800273a:	d111      	bne.n	8002760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002744:	d004      	beq.n	8002750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d107      	bne.n	8002760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002768:	d10f      	bne.n	800278a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e017      	b.n	80027ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d19b      	bne.n	8002704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000000c 	.word	0x2000000c

080027dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f0:	d111      	bne.n	8002816 <SPI_EndRxTransaction+0x3a>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fa:	d004      	beq.n	8002806 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002804:	d107      	bne.n	8002816 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002814:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800281e:	d117      	bne.n	8002850 <SPI_EndRxTransaction+0x74>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002828:	d112      	bne.n	8002850 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2200      	movs	r2, #0
 8002832:	2101      	movs	r1, #1
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff ff49 	bl	80026cc <SPI_WaitFlagStateUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01a      	beq.n	8002876 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e013      	b.n	8002878 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f7ff ff36 	bl	80026cc <SPI_WaitFlagStateUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	f043 0220 	orr.w	r2, r3, #32
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e000      	b.n	8002878 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff ff18 	bl	80026cc <SPI_WaitFlagStateUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e000      	b.n	80028b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <__libc_init_array>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	2600      	movs	r6, #0
 80028c0:	4d0c      	ldr	r5, [pc, #48]	; (80028f4 <__libc_init_array+0x38>)
 80028c2:	4c0d      	ldr	r4, [pc, #52]	; (80028f8 <__libc_init_array+0x3c>)
 80028c4:	1b64      	subs	r4, r4, r5
 80028c6:	10a4      	asrs	r4, r4, #2
 80028c8:	42a6      	cmp	r6, r4
 80028ca:	d109      	bne.n	80028e0 <__libc_init_array+0x24>
 80028cc:	f000 f830 	bl	8002930 <_init>
 80028d0:	2600      	movs	r6, #0
 80028d2:	4d0a      	ldr	r5, [pc, #40]	; (80028fc <__libc_init_array+0x40>)
 80028d4:	4c0a      	ldr	r4, [pc, #40]	; (8002900 <__libc_init_array+0x44>)
 80028d6:	1b64      	subs	r4, r4, r5
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	42a6      	cmp	r6, r4
 80028dc:	d105      	bne.n	80028ea <__libc_init_array+0x2e>
 80028de:	bd70      	pop	{r4, r5, r6, pc}
 80028e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e4:	4798      	blx	r3
 80028e6:	3601      	adds	r6, #1
 80028e8:	e7ee      	b.n	80028c8 <__libc_init_array+0xc>
 80028ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ee:	4798      	blx	r3
 80028f0:	3601      	adds	r6, #1
 80028f2:	e7f2      	b.n	80028da <__libc_init_array+0x1e>
 80028f4:	0800297c 	.word	0x0800297c
 80028f8:	0800297c 	.word	0x0800297c
 80028fc:	0800297c 	.word	0x0800297c
 8002900:	08002980 	.word	0x08002980

08002904 <memcpy>:
 8002904:	440a      	add	r2, r1
 8002906:	4291      	cmp	r1, r2
 8002908:	f100 33ff 	add.w	r3, r0, #4294967295
 800290c:	d100      	bne.n	8002910 <memcpy+0xc>
 800290e:	4770      	bx	lr
 8002910:	b510      	push	{r4, lr}
 8002912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002916:	4291      	cmp	r1, r2
 8002918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800291c:	d1f9      	bne.n	8002912 <memcpy+0xe>
 800291e:	bd10      	pop	{r4, pc}

08002920 <memset>:
 8002920:	4603      	mov	r3, r0
 8002922:	4402      	add	r2, r0
 8002924:	4293      	cmp	r3, r2
 8002926:	d100      	bne.n	800292a <memset+0xa>
 8002928:	4770      	bx	lr
 800292a:	f803 1b01 	strb.w	r1, [r3], #1
 800292e:	e7f9      	b.n	8002924 <memset+0x4>

08002930 <_init>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr

0800293c <_fini>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr
